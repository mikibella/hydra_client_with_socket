/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: 
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct OidcApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> OidcApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> OidcApiClient<C> {
        OidcApiClient {
            configuration,
        }
    }
}

pub trait OidcApi: Send + Sync {
    fn create_oidc_dynamic_client(&self, o_auth2_client: models::OAuth2Client) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>>;
    fn create_verifiable_credential(&self, create_verifiable_credential_request_body: Option<models::CreateVerifiableCredentialRequestBody>) -> Pin<Box<dyn Future<Output = Result<models::VerifiableCredentialResponse, Error>> + Send>>;
    fn delete_oidc_dynamic_client(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn discover_oidc_configuration(&self, ) -> Pin<Box<dyn Future<Output = Result<models::OidcConfiguration, Error>> + Send>>;
    fn get_oidc_dynamic_client(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>>;
    fn get_oidc_user_info(&self, ) -> Pin<Box<dyn Future<Output = Result<models::OidcUserInfo, Error>> + Send>>;
    fn revoke_oidc_session(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn set_oidc_dynamic_client(&self, id: &str, o_auth2_client: models::OAuth2Client) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>>;
}

impl<C: Connect>OidcApi for OidcApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_oidc_dynamic_client(&self, o_auth2_client: models::OAuth2Client) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/oauth2/register".to_string())
        ;
        req = req.with_body_param(o_auth2_client);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn create_verifiable_credential(&self, create_verifiable_credential_request_body: Option<models::CreateVerifiableCredentialRequestBody>) -> Pin<Box<dyn Future<Output = Result<models::VerifiableCredentialResponse, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/credentials".to_string())
        ;
        req = req.with_body_param(create_verifiable_credential_request_body);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_oidc_dynamic_client(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/oauth2/register/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn discover_oidc_configuration(&self, ) -> Pin<Box<dyn Future<Output = Result<models::OidcConfiguration, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/.well-known/openid-configuration".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_oidc_dynamic_client(&self, id: &str) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/oauth2/register/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_oidc_user_info(&self, ) -> Pin<Box<dyn Future<Output = Result<models::OidcUserInfo, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/userinfo".to_string())
            .with_auth(__internal_request::Auth::Oauth)
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn revoke_oidc_session(&self, ) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/oauth2/sessions/logout".to_string())
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_oidc_dynamic_client(&self, id: &str, o_auth2_client: models::OAuth2Client) -> Pin<Box<dyn Future<Output = Result<models::OAuth2Client, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/oauth2/register/{id}".to_string())
        ;
        req = req.with_path_param("id".to_string(), id.to_string());
        req = req.with_body_param(o_auth2_client);

        req.execute(self.configuration.borrow())
    }

}
