/*
 * Ory Hydra API
 *
 * Documentation for all of Ory Hydra's APIs. 
 *
 * The version of the OpenAPI document: 
 * Contact: hi@ory.sh
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct JwkApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> JwkApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> JwkApiClient<C> {
        JwkApiClient {
            configuration,
        }
    }
}

pub trait JwkApi: Send + Sync {
    fn create_json_web_key_set(&self, set: &str, create_json_web_key_set: models::CreateJsonWebKeySet) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>>;
    fn delete_json_web_key(&self, set: &str, kid: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn delete_json_web_key_set(&self, set: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>>;
    fn get_json_web_key(&self, set: &str, kid: &str) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>>;
    fn get_json_web_key_set(&self, set: &str) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>>;
    fn set_json_web_key(&self, set: &str, kid: &str, json_web_key: Option<models::JsonWebKey>) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKey, Error>> + Send>>;
    fn set_json_web_key_set(&self, set: &str, json_web_key_set: Option<models::JsonWebKeySet>) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>>;
}

impl<C: Connect>JwkApi for JwkApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_json_web_key_set(&self, set: &str, create_json_web_key_set: models::CreateJsonWebKeySet) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/admin/keys/{set}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.with_body_param(create_json_web_key_set);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_json_web_key(&self, set: &str, kid: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/admin/keys/{set}/{kid}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.with_path_param("kid".to_string(), kid.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_json_web_key_set(&self, set: &str) -> Pin<Box<dyn Future<Output = Result<(), Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/admin/keys/{set}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_json_web_key(&self, set: &str, kid: &str) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/admin/keys/{set}/{kid}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.with_path_param("kid".to_string(), kid.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_json_web_key_set(&self, set: &str) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/admin/keys/{set}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_json_web_key(&self, set: &str, kid: &str, json_web_key: Option<models::JsonWebKey>) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKey, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/admin/keys/{set}/{kid}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.with_path_param("kid".to_string(), kid.to_string());
        req = req.with_body_param(json_web_key);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn set_json_web_key_set(&self, set: &str, json_web_key_set: Option<models::JsonWebKeySet>) -> Pin<Box<dyn Future<Output = Result<models::JsonWebKeySet, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::PUT, "/admin/keys/{set}".to_string())
        ;
        req = req.with_path_param("set".to_string(), set.to_string());
        req = req.with_body_param(json_web_key_set);

        req.execute(self.configuration.borrow())
    }

}
